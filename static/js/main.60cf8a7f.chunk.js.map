{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ambientLight","AmbientLight","color","intensity","pointLight1","PointLight","position","pointLight2","lightingEffect","LightingEffect","material","ambient","diffuse","shininess","specularColor","INITIAL_VIEW_STATE","longitude","latitude","zoom","maxZoom","minZoom","pitch","bearing","colorRange","getTooltip","object","lat","lng","count","points","length","Number","isFinite","toFixed","App","threshold","radiusPixels","mapStyle","upperPercentile","coverage","useState","vizType","setVizType","crimeData","data","setData","crimeType","setCrimeType","uniqueCrimeTypes","Set","map","crime","TYPE","crimeTypeMenu","onClick","e","key","message","success","filter","type","index","Item","vizTypeMenu","layers","HeatmapLayer","id","pickable","getPosition","d","COORDINATES","HexagonLayer","elevationRange","elevationScale","extruded","radius","lowerPercentile","transitions","className","style","height","width","padding","margin","zIndex","marginTop","right","display","flexDirection","marginRight","overlay","placement","DownOutlined","effects","initialViewState","controller","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.60cf8a7f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport { HeatmapLayer } from \"@deck.gl/aggregation-layers\";\nimport { AmbientLight, PointLight, LightingEffect } from \"@deck.gl/core\";\nimport { HexagonLayer } from \"@deck.gl/aggregation-layers\";\nimport { Menu, Dropdown, Button, message } from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\nimport crimeData from \"./data/data.json\";\n\n// Set your mapbox access token here\nconst MAPBOX_ACCESS_TOKEN =\n  \"pk.eyJ1IjoicGFudDIwMDIiLCJhIjoiY2prenlwb2ZtMHlnMjNxbW1ld3VxYWZ4cCJ9.rOb8DhCzsysBIw69MxyWKg\"; // eslint-disable-line\n\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0,\n});\n\nconst pointLight1 = new PointLight({\n  color: [255, 255, 255],\n  intensity: 0.6,\n  position: [-0.144528, 49.739968, 80000],\n});\n\nconst pointLight2 = new PointLight({\n  color: [255, 255, 255],\n  intensity: 0.6,\n  position: [-3.807751, 54.104682, 8000],\n});\n\nconst lightingEffect = new LightingEffect({\n  ambientLight,\n  pointLight1,\n  pointLight2,\n});\n\nconst material = {\n  ambient: 0.64,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [51, 51, 51],\n};\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -84.3963,\n  latitude: 33.7556,\n  zoom: 11,\n  maxZoom: 20,\n  minZoom: 4,\n  pitch: 60,\n  bearing: 0,\n};\n\nexport const colorRange = [\n  [1, 152, 189],\n  [73, 227, 206],\n  [216, 254, 181],\n  [254, 237, 177],\n  [254, 173, 84],\n  [209, 55, 78],\n];\n\nfunction getTooltip({ object }) {\n  if (!object) {\n    return null;\n  }\n  const lat = object.position[1];\n  const lng = object.position[0];\n  const count = object.points.length;\n\n  return `\\\n    Latitude: ${Number.isFinite(lat) ? lat.toFixed(6) : \"\"}\n    Longitude: ${Number.isFinite(lng) ? lng.toFixed(6) : \"\"}\n    ${count} Crimes`;\n}\n\nexport default function App({\n  intensity = 1,\n  threshold = 0.1,\n  radiusPixels = 30,\n  mapStyle = \"mapbox://styles/mapbox/dark-v9\",\n  upperPercentile = 100,\n  coverage = 1,\n}) {\n  const [vizType, setVizType] = useState(\"Hexagon\");\n  const [data, setData] = useState(crimeData);\n  const [crimeType, setCrimeType] = useState(null);\n  const uniqueCrimeTypes = [...new Set(crimeData.map((crime) => crime.TYPE))];\n  const crimeTypeMenu = (\n    <Menu onClick={handleMenuClick}>\n      {uniqueCrimeTypes.map((type, index) => (\n        <Menu.Item key={index}>{type}</Menu.Item>\n      ))}\n      <Menu.Item key=\"ALL\">All Crimes</Menu.Item>\n    </Menu>\n  );\n\n  function handleMenuClick(e) {\n    if (e.key === \"ALL\") {\n      setCrimeType(\"ALL\");\n      setData(crimeData);\n      message.success(\"Showing all crimes\", 1);\n    } else {\n      setCrimeType(uniqueCrimeTypes[e.key]);\n      setData(\n        crimeData.filter((crime) => crime.TYPE === uniqueCrimeTypes[e.key])\n      );\n      message.success(\"Selected \" + uniqueCrimeTypes[e.key], 1);\n    }\n  }\n\n  const vizTypeMenu = (\n    <Menu onClick={handleVizChange}>\n      <Menu.Item key=\"Heatmap\">Heatmap</Menu.Item>\n      <Menu.Item key=\"Hexagon\">Hexagon</Menu.Item>\n    </Menu>\n  );\n\n  function handleVizChange(e) {\n    setVizType(e.key);\n    message.success(\"Selected \" + e.key, 1);\n  }\n\n  const layers = [\n    vizType === \"Heatmap\"\n      ? new HeatmapLayer({\n          data,\n          id: \"heatmp-layer\",\n          pickable: true,\n          getPosition: (d) => [d.COORDINATES[1], d.COORDINATES[0]],\n          radiusPixels,\n          intensity,\n          threshold,\n        })\n      : vizType === \"Hexagon\"\n      ? new HexagonLayer({\n          id: \"hexagon\",\n          colorRange,\n          coverage,\n          data,\n          elevationRange: [0, 200],\n          elevationScale: data && data.length ? 50 : 0,\n          extruded: true,\n          getPosition: (d) => [d.COORDINATES[1], d.COORDINATES[0]],\n          pickable: true,\n          radius: 100,\n          upperPercentile,\n          lowerPercentile: 0,\n          material,\n\n          transitions: {\n            elevationScale: 1000,\n          },\n        })\n      : null,\n  ];\n\n  return (\n    <div\n      className=\"container\"\n      style={{ height: \"100vh\", width: \"100vw\", padding: 0, margin: 0 }}\n    >\n      <div\n        style={{\n          zIndex: \"1000\",\n          position: \"absolute\",\n          marginTop: \"1.5%\",\n          right: \"2%\",\n          display: \"flex\",\n          flexDirection: \"row\",\n        }}\n      >\n        <div style={{ marginRight: 10 }}>\n          <Dropdown overlay={crimeTypeMenu} placement=\"bottomRight\">\n            <Button>\n              {crimeType ? crimeType : \"Crime type\"} <DownOutlined />\n            </Button>\n          </Dropdown>\n        </div>\n        <Dropdown overlay={vizTypeMenu} placement=\"bottomRight\">\n          <Button>\n            {vizType ? vizType : \"Choose visualization type\"} <DownOutlined />\n          </Button>\n        </Dropdown>\n      </div>\n      <div\n        style={{\n          zIndex: \"-1\",\n        }}\n      >\n        <DeckGL\n          effects={[lightingEffect]}\n          initialViewState={INITIAL_VIEW_STATE}\n          controller={true}\n          layers={layers}\n          getTooltip={getTooltip}\n        >\n          <StaticMap\n            reuseMaps\n            mapStyle={mapStyle}\n            preventStyleDiffing={true}\n            mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\n          />\n        </DeckGL>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}