{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["INITIAL_VIEW_STATE","longitude","latitude","zoom","maxZoom","pitch","bearing","App","intensity","threshold","radiusPixels","mapStyle","menu","onClick","e","message","info","console","log","Item","key","icon","UserOutlined","processedData","data","layers","HeatmapLayer","id","pickable","getPosition","d","COORDINATES","className","style","height","width","padding","margin","zIndex","position","marginTop","right","overlay","placement","DownOutlined","initialViewState","controller","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"up6UAaMA,EAAqB,CACzBC,WAAY,QACZC,SAAU,QACVC,KAAM,GACNC,QAAS,GACTC,MAAO,EACPC,QAAS,GAGI,SAASC,EAAT,GAKX,IAAD,IAJDC,iBAIC,MAJW,EAIX,MAHDC,iBAGC,MAHW,GAGX,MAFDC,oBAEC,MAFc,GAEd,MADDC,gBACC,MADU,iCACV,EACKC,EACJ,kBAAC,IAAD,CAAMC,QAaR,SAAyBC,GACvBC,IAAQC,KAAK,uBACbC,QAAQC,IAAI,QAASJ,KAdnB,kBAAC,IAAKK,KAAN,CAAWC,IAAI,IAAIC,KAAM,kBAACC,EAAA,EAAD,OAAzB,iBAGA,kBAAC,IAAKH,KAAN,CAAWC,IAAI,IAAIC,KAAM,kBAACC,EAAA,EAAD,OAAzB,iBAGA,kBAAC,IAAKH,KAAN,CAAWC,IAAI,IAAIC,KAAM,kBAACC,EAAA,EAAD,OAAzB,kBAWJ,IAAMC,EAAgBC,EACtBP,QAAQC,IAAIK,GACZ,IAAME,EAAS,CACb,IAAIC,IAAa,CACfF,KAAMD,EACNI,GAAI,eACJC,UAAU,EACVC,YAAa,SAACC,GAAD,MAAO,CAACA,EAAEC,YAAY,GAAID,EAAEC,YAAY,KACrDrB,eACAF,YACAC,eAIJ,OACE,yBACEuB,UAAU,YACVC,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAASC,QAAS,EAAGC,OAAQ,IAE9D,yBACEJ,MAAO,CACLK,OAAQ,OACRC,SAAU,WACVC,UAAW,OACXC,MAAO,OAGT,kBAAC,IAAD,CAAUC,QAAS9B,EAAM+B,UAAU,eACjC,kBAAC,IAAD,mBACa,kBAACC,EAAA,EAAD,SAIjB,yBACEX,MAAO,CACLK,OAAQ,OAGV,kBAAC,IAAD,CACEO,iBAAkB7C,EAClB8C,YAAY,EACZrB,OAAQA,GAER,kBAAC,IAAD,CACEsB,WAAS,EACTpC,SAAUA,EACVqC,qBAAqB,EACrBC,qBAnFV,kGCCkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAClD,EAAD,OAEFmD,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMpD,c","file":"static/js/main.729efef2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport { HeatmapLayer } from \"@deck.gl/aggregation-layers\";\nimport { Menu, Dropdown, Button, message } from \"antd\";\nimport { DownOutlined, UserOutlined } from \"@ant-design/icons\";\nimport data from \"./data/data.json\";\n\n// Set your mapbox access token here\nconst MAPBOX_ACCESS_TOKEN =\n  \"pk.eyJ1IjoicGFudDIwMDIiLCJhIjoiY2prenlwb2ZtMHlnMjNxbW1ld3VxYWZ4cCJ9.rOb8DhCzsysBIw69MxyWKg\"; // eslint-disable-line\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -84.3963,\n  latitude: 33.7556,\n  zoom: 11,\n  maxZoom: 16,\n  pitch: 0,\n  bearing: 0,\n};\n\nexport default function App({\n  intensity = 1,\n  threshold = 0.1,\n  radiusPixels = 30,\n  mapStyle = \"mapbox://styles/mapbox/dark-v9\",\n}) {\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key=\"1\" icon={<UserOutlined />}>\n        1st menu item\n      </Menu.Item>\n      <Menu.Item key=\"2\" icon={<UserOutlined />}>\n        2nd menu item\n      </Menu.Item>\n      <Menu.Item key=\"3\" icon={<UserOutlined />}>\n        3rd menu item\n      </Menu.Item>\n    </Menu>\n  );\n\n  function handleMenuClick(e) {\n    message.info(\"Click on menu item.\");\n    console.log(\"click\", e);\n  }\n\n  const processedData = data;\n  console.log(processedData);\n  const layers = [\n    new HeatmapLayer({\n      data: processedData,\n      id: \"heatmp-layer\",\n      pickable: false,\n      getPosition: (d) => [d.COORDINATES[1], d.COORDINATES[0]],\n      radiusPixels,\n      intensity,\n      threshold,\n    }),\n  ];\n\n  return (\n    <div\n      className=\"container\"\n      style={{ height: \"100vh\", width: \"100vw\", padding: 0, margin: 0 }}\n    >\n      <div\n        style={{\n          zIndex: \"1000\",\n          position: \"absolute\",\n          marginTop: \"1.5%\",\n          right: \"2%\",\n        }}\n      >\n        <Dropdown overlay={menu} placement=\"bottomRight\">\n          <Button>\n            Crime type <DownOutlined />\n          </Button>\n        </Dropdown>\n      </div>\n      <div\n        style={{\n          zIndex: \"-1\",\n        }}\n      >\n        <DeckGL\n          initialViewState={INITIAL_VIEW_STATE}\n          controller={true}\n          layers={layers}\n        >\n          <StaticMap\n            reuseMaps\n            mapStyle={mapStyle}\n            preventStyleDiffing={true}\n            mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\n          />\n        </DeckGL>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}